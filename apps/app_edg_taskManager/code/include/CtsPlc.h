#ifndef _CTS_PLC_H_
#define _CTS_PLC_H_

 void taskmng_task_record_file_del_que_clear(uint8 pipe);
 void taskmng_meter_search_result_write(uint8 pipe,uint8* buf,uint16 len);
 void taskmng_event_report_amr_fun(uint8 pipe,uint8* buf,uint16 len);
 void taskmng_HPLC_info_save(uint8 pipe,uint8* buf,uint16 len);
 void taskmng_node_reject_info_save(uint8 pipe,uint8* buf,uint16 len);
 void taskmng_power_on_off_deal_col(uint8 pipe,uint8* buf,uint16 len);
 void taskmng_power_on_off_deal_met(uint8 pipe,uint8* buf,uint16 len);
 void taskmng_HPLC_across_area_flag_set(uint8 pipe,uint8 flag);
 void taskmng_HPLC_off_grid_set(uint8 pipe,uint8 flag);
 void taskmng_HPLC_node_reject_set(uint8 pipe,uint8 flag);
 void taskmng_cco_meter_file_clear(uint8 pipe);
 void taskmng_cco_sta_info_fun(uint8* buf,uint16 len);
 void taskmng_cco_sta_info_write(uint8 pipe,uint8* buf,uint16 len);
 void taskmng_msg_0061_unpack(uint8 pipe,uint8*buf,uint16 len);
int taskmng_file_transfer_msg_fun(uint8* buf,uint16 len);
void taskmng_file_transfer_msg_amr(uint8 pipe,uint8*buf,uint16 len);
int taskmng_file_transfer_deal(uint8 pipe);
int taskmng_file_transfer_send(uint8 pipe);
uint16 taskmng_file_transfer_sendbuf_pack(uint8 pipe,OOP_TSA_T tsa,uint16 fileindex,uint8 *filebuf,uint16 size,BOOL bEncode,uint8* outbuf);
int taskmng_file_transfer_recv(uint8 pipe,uint8* buf,uint16 len);
uint16 taskmng_file_transfer_check_pack(uint8 pipe,OOP_TSA_T tsa,uint8* outbuf);
void taskmng_file_transfer_result_check(MESSAGE_INFO_T* MsgInfo );
void taskmng_file_transfer_state_unpack(uint8 pipe,uint8 *buf,uint16 len);
 void taskmng_data_init_check(uint8 pipe);
 void taskmng_time_manage ( uint8 CommPipe );
 void taskmng_task_run_ergodic(uint8 Pipe);
 int taskmng_task_record_file_del_check(uint8 pipe);
 void taskmng_record_file_delete_pipe(uint8 pipe,uint16 TaskId,uint8 logicid);
 void taskmng_run_task_get(uint8 Pipe,uint8 TaskId,uint8 logicid,CTS_RUN_TASK_T **RunTask);
 int taskmng_data_reading_normal(uint8 Pipe);
 BOOL taskmng_task_run_init(uint8 Pipe);
 void taskmng_task_run_info_reset(CTS_RUN_TASK_T *TaskInfo);
 void taskmng_plc_task_creat(uint8 CommPipe);
 int taskmng_plc_task_queue_add ( uint8 CommPipe,MAIN_CYC_STATE_T TaskName );
 void taskmng_all_flag_init ( uint8 CommPipe );
 int taskmng_node_version_info_get(uint8 pipe);
 void taskmng_plc_task_run ( uint8 CommPipe );
 int taskmng_router_ctrl_set ( uint8 CommPipe,ROUTER_CTRL_STATE_T CtrlCmd );
int taskmng_msg_fun_deal(uint8 pipe,uint16 IID,uint16 IOP,uint16 len,uint8 *PayLoad,uint16 *RecvLen,uint8 *RecvPayLoad);
 int taskmng_delay_deal ( uint8 CommPipe,uint8* PlcTaskDelaySec );
 uint16 taskmng_msg_data_pack(uint8 pipe,uint16 IID,uint16 IOP,uint16 len,uint8 *PayLoad,uint16* MsgIndex);
 int32 taskmng_plc_queue_read(LockQueue_T *pLockQueue, uint8 *buf);
 int32 taskmng_plc_queue_write(LockQueue_T *pLockQueue, uint8 *buf, int32 buf_len);
 int taskmng_HPLC_info_get(uint8 pipe);
 void taskmng_normal_data_write_pipe(uint8 pipe,uint8* DataBuf,uint16 DataLen,OOP_OAD_U Oad,uint16 infonum,uint8 logicid);
 int taskmng_normal_data_read_pipe(uint8 pipe,OOP_OAD_U Oad,uint16 infonum,uint8 logicid,uint8* DataBuf,uint16 *DataLen);
 void taskmng_normal_data_delete_pipe(uint8 pipe,uint16 infoNum,OOP_OAD_U Oad);
 void taskmng_update_cycle_check(uint8 pipe);
 int taskmng_data_reading_trans(uint8 pipe,SCHEME_TASK_RUN_INFO *TaskInfo,CTS_RUN_TASK_T* RunTask);
 void taskmng_task_record_file_load(uint8 pipe,SCHEME_TASK_RUN_INFO *TaskInfo,CTS_RUN_TASK_T* RunTask);
 int16 taskmng_ms_index_get(uint8 Pipe,uint16 Pn,uint8 logicid);
 void taskmng_comm_recv_buff_clear(uint8 CommPipe);
 int taskmng_trans_frame_send(uint8 pipe,SCHEME_TASK_RUN_INFO *TaskInfo,CTS_RUN_TASK_T* RunTask);
 int taskmng_next_trans_buf_get(uint8 pipe,SCHEME_TASK_RUN_INFO *TaskInfo,CTS_RUN_TASK_T* RunTask,uint16* MsIndex);
 int taskmng_mtr_in_queue_is_exist(uint8 Pipe,uint16 Pn);
 void taskmng_task_record_file_set(uint8 pipe,uint16 MsIndex,uint16 TaskId,uint8 logicid);
 BOOL taskmng_amr_report_data_unpack(uint8 *PayloadBuf,uint32 Len,AMR_PLC_INFO_REPORT_T  *AmrReportInfo);
 uint8 taskmng_seq_is_valid(uint8 Pipe,uint8* OutSeq, uint8 *addr);
 void taskmng_trans_data_save(uint8 pipe,SCHEME_TASK_RUN_INFO *TaskInfo,CTS_RUN_TASK_T* RunTask,uint16 MsIndex,uint8 seq,uint8* buf,uint16 buflen);
 void taskmng_col_state_write(uint8 pipe,uint16 MtrIndex);
 void taskmng_pn_state_refresh(uint8 Pipe,uint8 SeqIndex);
 int taskmng_task_runlist_check(uint8 Pipe,CTS_RUN_TASK_T **TaskInfo);
 void taskmng_task_info_init(uint8 Pipe,SCHEME_TASK_RUN_INFO *pSchemeTaskRunInfo, CTS_RUN_TASK_T *tmpTask,MtrAmrInfo_T *MtrInfo);
 int taskmng_paral_amr_frame_make(uint8 Pipe,CTS_RUN_TASK_T *CurTask,SCHEME_TASK_RUN_INFO SchemeTaskInfo);
 void taskmng_patch_result_set(uint8 pipe,uint16 Pn,CTS_RUN_TASK_T *CurTask,uint8 DayCnt);
 void taskmng_645_event_data_save(uint8 pipe,uint16 Pn,uint8 logicid,uint16 TaskId,CSD_TASK_INFO *RoadTask,time_t StartTime);
 int taskmng_meter_file_modify_deal(uint8 Pipe);
 int taskmng_slave_info_add(uint8 Pipe,MODULE_METADDRHEAD *PModuleInfo,uint8 AddNum);
 int taskmng_router_info_delete(uint8 Pipe,MODULE_METADDRHEAD *PModuleInfo,uint8 DeleteNum);
 int taskmng_relay_trans_deal ( uint8 pipe );
 void taskmng_broad_delay_send(uint8 pipe,uint8* buf,uint16 len,uint8 prtl,uint16 *MsgIndex);
 void taskmng_data_broad(uint8 pipe,uint8* buf,uint16 len,uint8 prtl,uint16 *MsgIndex);
 int taskmng_645_relay_DI_get(uint8 pipe,uint8 MtrIndex,uint8 prtl,uint8* DI);
 void taskmng_relay_up_msg_write(uint8 pipe,int result);
 int taskmng_645_relay_isvalid(uint8 pipe,uint8 prtl,uint8* pRecvDI,uint8 CtrlCode,uint16* DataLen);
 void taskmng_proxy_get_response_list_up_msg_write(uint8 pipe);
 int taskmng_relay_exist_check(uint8 pipe);
 int taskmng_next_broad_DI_get(uint8 Pipe,DI_INFO_T* DiInfo, int *MsIndex,SCHEME_TASK_RUN_INFO *TaskInfo,CTS_RUN_TASK_T *CurTask);
BOOL taskmng_send_queue_valid_check(uint8 pipe);
int taskmng_645_recv_frame_judge(uint8 Pipe,uint16 MsIndex,SCHEME_TASK_RUN_INFO* pTmp_NormalLink,uint8 *pRecvDI, char CtrlCode, uint16* DataLen);
void taskmng_645_map_index_move(uint8 Pipe,SCHEME_TASK_RUN_INFO* Tmp_AmrLink,int MsIndex,BOOL flag);
 void taskmng_645_frz_move_judge(uint8 Pipe,SCHEME_TASK_RUN_INFO* Tmp_AmrLink,CTS_RUN_TASK_T *RunTask ,int MsIndex, uint8 Result);
 int taskmng_data_reading_encrypt(uint8 pipe,SCHEME_TASK_RUN_INFO *TaskInfo,CTS_RUN_TASK_T* RunTask);
 int taskmng_encrypt_send(uint8 pipe,SCHEME_TASK_RUN_INFO *TaskInfo,CTS_RUN_TASK_T* RunTask);
 int taskmng_encrypt_recv(uint8 pipe,uint8* buf,uint16 len,SCHEME_TASK_RUN_INFO *TaskInfo,CTS_RUN_TASK_T* RunTask);
 void taskmng_encrypt_frame_send(uint8 pipe,uint16 pn,uint8 *buf,uint16 len,uint16 *MsgIndex);
 void taskmng_meter_search_report_check(uint8 pipe);
 void taskmng_hplc_update_msg_amr(uint8 pipe,uint8*buf,uint16 len);
  int taskmng_645_frz_move_judge_new(uint8 Pipe,SCHEME_TASK_RUN_INFO* Tmp_AmrLink,CTS_RUN_TASK_T *RunTask ,int MsIndex, uint8 Result);
 int taskmng_645_recv_frame_judge_new(uint8 Pipe,uint16 MsIndex,DI_INFO_T *diinfo, SCHEME_TASK_RUN_INFO* pTmp_NormalLink,uint8 *pRecvDI,uint16* DataLen,uint16* mapindex);

int16 NamedCollector(uint8 pipe,uint8 *FrameBuff,uint16 *Pn,uint8 *MtrAddr);
int taskmng_paral_cjq_frame_make(uint8 Pipe);
void Reply8802ConfirmFrame(uint8* AcqAddr,uint8 Pipe,uint16 Pn);
int frozen_init_jiangsu();
int taskmng_HPLC_node_info_get(uint8 pipe);
int taskmng_router_version_query(uint8 pipe);
int taskmng_node_minute_collect_check(uint8 pipe);
int taskmng_caj_info_add(uint8 Pipe,Collect_File_T *Collector,uint8 AddNum);
int taskmng_paral_caj_read_data_unpack(uint8 Pipe,uint8 seqindex, uint8 logicid,AMR_PLC_INFO_REPORT_T AmrReportInfo, MeterPrtlFmt_T *MeterPrtlData, uint16 *MtrIndex,char *apdu, FRAME_SEQ_INFO_T FrameSeqInfo);
uint8 taskmng_seq_is_caj_valid(uint8 Pipe,uint8* OutSeq, uint16 Pn);
void taskmng_caj_state_refresh(uint8 Pipe,uint8 SeqIndex);
int taskmng_caj_in_queue_is_exist(uint8 Pipe,uint16 Pn);
uint16 taskmng_3762_frame_pack(AppData_T appdata,uint8 *frame);
int taskmng_file_transfer_deal_485(uint8 pipe);
void taskmng_relay_up_msg_write_0011(uint8 pipe,int result,uint32 len,uint8* buf);
int taskmng_meter_relay_data_send ( uint8 pipe);
uint16 taskmng_proxy_overtime_get(uint16 overtime);
void taskmng_transparent_broad_recv(uint8 pipe,uint8* buf,uint16 buflen);
int taskmng_relay_data_01_unpack(uint8 pipe,uint8* DataBuff,uint16 DataLen,MeterPrtlFmt_T*  MeterPrtlData,char* apdu);
void taskmng_proxy_error_data_pack(uint8 pipe);
int taskmng_encrypt_result_first_write(DB_CLIENT client,uint8 id,uint8 type,uint16 num,MS_INFO *pMsInfo);
int taskmng_encrypt_result_save(uint8 pipe,uint8 id,uint8 *addr);
uint16 taskmng_file_transfer_start_pack(uint8 pipe,OOP_TSA_T tsa,OOPM_STARTTRANS_T *fileinfo,BOOL bEncode,uint8* outbuf);
BOOL taskmng_file_encrypt_update_check(uint8 pipe);
uint16 taskmng_file_transfer_encrypt_init_pack(uint8 pipe,uint16 pn,uint8* outbuf);
uint16 taskmng_file_transfer_encrypt_couter_pack(uint8 pipe,uint16 pn,uint8* outbuf);
uint16 taskmng_file_transfer_encrypt_connect_pack(uint8 pipe,uint16 msindex,uint8* outbuf);
uint16 taskmng_file_transfer_encrypt_update_pack(uint8 pipe,uint16 msindex,uint8* outbuf);
int taskmng_encrypt_normaltask_recv(uint8 pipe,uint8* buf,uint16 len,SCHEME_TASK_RUN_INFO *TaskInfo,CTS_RUN_TASK_T* RunTask,uint16 pn,uint8 prtl);
int taskmng_encrypt_normaltask_send(uint8 pipe,SCHEME_TASK_RUN_INFO *TaskInfo,CTS_RUN_TASK_T* RunTask,uint16 pn,uint8 prtl);
void taskmng_event_report_clear(uint8 pipe);
void taskmng_down_recv_buff_clear(uint8 CommPipe);
void taskmng_file_transfer_update_result_save(uint8 pipe,uint8 result,OOP_TSA_T *tsa);

void taskmng_meter_power_write(uint8 pipe,uint8 *buf,uint16 buflen);
void taskmng_time_error_num_init();
void taskmng_time_error_num_add();
uint16 taskmng_time_error_num_get();
void taskmng_time_error_result_check(uint8 pipe,uint16 pn,CTS_RUN_TASK_T *runTask);
void taskmng_time_error_num_init_check(uint8 pipe,SCHEME_TASK_RUN_INFO *taskinfo);

void taskmng_meter_power_cache_init();
void taskmng_meter_power_cache_check(uint8 pipe);
uint16 taskmng_meter_power_deal(uint8 pipe,uint8* Addr,uint8 EventType,uint8 *buf,uint16 maxlen);
void taskmng_meter_power_write(uint8 pipe,uint8 *buf,uint16 buflen);
int taskmmng_meter_power_event_write(uint8 pipe,DB_CLIENT clientid,METER_POWER_STATE_T *data);
int taskmng_meter_power_event_read(uint8 pipe,DB_CLIENT clientid,METER_POWER_STATE_T *data);
void taskmng_meter_power_buflist_init();
int taskmng_meter_power_buf_add(uint8 pipe,uint8 *addr,TMN_POWER_STATE_E powerstate,uint8 *buf,uint16 buflen);
void taskmng_meter_power_special_deal(uint8 pipe);
void taskmng_meter_power_report_num_clear(TMN_POWER_STATE_E powerstate);
void taskmng_meter_power_report_check(uint8 pipe);
int taskmng_meter_time_manager(uint8 pipe);
void taskmng_meter_time_add(uint8 pipe,uint16 pn,uint8 prtl,uint8 *addr);
void taskmng_meter_event_report_power_check(uint8 pipe,uint16 pn,uint8 *buf,uint16 len);
void taskmng_meter_time_485manager(uint8 pipe);
void taskmng_meter_time_delay_add(uint8 pipe,uint16 pn,uint8 prtl,uint8 *addr,uint32 diff);
int taskmng_meter_time_delay(uint8 pipe);
void taskmng_meter_time_485delay(uint8 pipe);



#endif
